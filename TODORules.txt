program: includeStmt usingStmt (functionDefOrStructDefOrEnumDef | declarationStmt | classDef)* mainFunction EOF; //added declarationStmt* here becuase of global scope and local scope requirement of joi

includeStmt: INCLUDE IOSTREAM;

usingStmt: USING NAMESPACE STD ';';

functionDefOrStructDefOrEnumDef: functionDef | structDef | enumDef;


classDef: CLASS IDENTIFIER (COLON PUBLIC IDENTIFIER (',' PUBLIC IDENTIFIER)*)? COLON (accessSpecifier COLON (declarationStmt|functionDef|constructor)*)* COLON ';';

constructor: IDENTIFIER '(' paramList? ')' COLON statements COLON;



functionCall: IDENTIFIER '(' argList? ')'
    | IDENTIFIER '.' IDENTIFIER '(' argList? ')'
    | structAccessStmt '(' argList? ')'
    ;





structDef: STRUCT IDENTIFIER COLON declarationStmt+ COLON ;

enumDef: ENUM IDENTIFIER COLON IDENTIFIER (',' IDENTIFIER)* COLON ;



assignStmt: idOrPointerOrAddrId '=' expression ';'
            | idOrPointerOrAddrId '[' expression ']'('['expression']')* '=' expression ';'
            | idOrPointerOrAddrId assignOp expression ';'
            | structAssignStmt
            ;

structAssignStmt: structAccessStmt '=' expression ';'
                | structAccessStmt '[' expression ']'('['expression']')* '=' expression ';'
                ;

structAccessStmt: IDENTIFIER'.'IDENTIFIER;

classFunctionAccessStmt: IDENTIFIER'.'functionCall';';









tryCatchStmt
    : TRY COLON statements COLON catchBlock+;

catchBlock
    : CATCH '(' IDENTIFIER IDENTIFIER ')' COLON statements COLON;

throwStmt
    : THROW expression ';';







accessSpecifier: PRIVATE
                | PUBLIC
                | PROTECTED
                ;

factor
    : INC idOrPointerOrAddrId
    | DEC idOrPointerOrAddrId
    | idOrPointerOrAddrId INC
    | idOrPointerOrAddrId DEC
    | STRING
    | CHAR_LITERAL
    | idOrPointerOrAddrId
    | NUMBER
    | idOrPointerOrAddrId ('[' expr ']')+
    | '(' expr ')'
    | TRUE
    | FALSE
    | structAccessStmt
    ;



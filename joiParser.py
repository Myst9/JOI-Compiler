# Generated from joi.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,82,835,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,1,0,5,0,150,8,0,10,0,12,0,153,9,0,1,0,3,0,156,8,0,
        1,0,1,0,1,0,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,3,0,168,8,0,1,
        0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,179,8,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,3,4,191,8,4,1,5,1,5,3,5,195,8,5,1,5,1,5,1,
        5,3,5,200,8,5,1,5,1,5,1,5,1,5,3,5,206,8,5,1,5,1,5,1,5,3,5,211,8,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,221,8,6,10,6,12,6,224,9,6,
        3,6,226,8,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,234,8,6,10,6,12,6,237,9,
        6,5,6,239,8,6,10,6,12,6,242,9,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,250,
        8,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,260,8,8,10,8,12,8,263,9,
        8,1,9,1,9,1,9,1,10,1,10,1,10,3,10,271,8,10,1,10,1,10,1,11,1,11,1,
        11,5,11,278,8,11,10,11,12,11,281,9,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,5,13,295,8,13,10,13,12,13,298,9,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
        14,325,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,4,16,335,8,16,
        11,16,12,16,336,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,347,
        8,17,10,17,12,17,350,9,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,5,20,365,8,20,10,20,12,20,368,9,20,1,20,
        1,20,1,21,1,21,3,21,374,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,3,23,389,8,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,402,8,23,10,23,12,23,405,
        9,23,1,23,1,23,3,23,409,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,3,23,421,8,23,1,24,1,24,1,24,3,24,426,8,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,439,8,24,10,
        24,12,24,442,9,24,1,24,1,24,3,24,446,8,24,1,24,1,24,1,24,3,24,451,
        8,24,1,25,1,25,1,25,1,25,1,25,3,25,458,8,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,484,8,29,10,29,12,29,487,
        9,29,3,29,489,8,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,509,8,32,3,32,
        511,8,32,1,32,1,32,1,32,1,32,1,32,3,32,518,8,32,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,5,33,529,8,33,10,33,12,33,532,9,33,1,
        33,1,33,3,33,536,8,33,1,34,1,34,1,34,1,34,5,34,542,8,34,10,34,12,
        34,545,9,34,1,34,1,34,1,34,3,34,550,8,34,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,5,35,560,8,35,10,35,12,35,563,9,35,1,36,1,36,1,36,
        1,37,1,37,1,37,5,37,571,8,37,10,37,12,37,574,9,37,1,38,1,38,1,39,
        1,39,1,39,1,39,1,39,4,39,583,8,39,11,39,12,39,584,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,5,42,607,8,42,10,42,12,42,610,9,42,1,42,3,42,
        613,8,42,3,42,615,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
        44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,5,45,636,8,
        45,10,45,12,45,639,9,45,1,45,3,45,642,8,45,1,45,1,45,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,
        50,3,50,675,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
        51,1,51,1,51,5,51,689,8,51,10,51,12,51,692,9,51,3,51,694,8,51,1,
        52,1,52,1,53,1,53,1,54,1,54,3,54,702,8,54,1,55,1,55,1,55,1,55,1,
        55,1,56,1,56,1,56,5,56,712,8,56,10,56,12,56,715,9,56,1,57,1,57,1,
        57,5,57,720,8,57,10,57,12,57,723,9,57,1,58,1,58,1,58,1,58,1,58,1,
        58,5,58,731,8,58,10,58,12,58,734,9,58,3,58,736,8,58,1,59,1,59,1,
        59,5,59,741,8,59,10,59,12,59,744,9,59,1,60,1,60,1,60,5,60,749,8,
        60,10,60,12,60,752,9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,4,61,773,
        8,61,11,61,12,61,774,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,3,61,787,8,61,1,62,1,62,1,62,1,62,1,62,4,62,794,8,62,11,62,
        12,62,795,1,63,1,63,1,63,3,63,801,8,63,1,64,1,64,1,64,1,65,1,65,
        1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,831,8,72,
        1,73,1,73,1,73,0,0,74,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,0,8,1,0,43,45,1,0,62,63,1,0,64,66,1,0,62,66,1,0,69,73,1,0,53,
        58,1,0,59,60,1,0,11,15,873,0,151,1,0,0,0,2,171,1,0,0,0,4,174,1,0,
        0,0,6,182,1,0,0,0,8,190,1,0,0,0,10,194,1,0,0,0,12,212,1,0,0,0,14,
        246,1,0,0,0,16,256,1,0,0,0,18,264,1,0,0,0,20,267,1,0,0,0,22,274,
        1,0,0,0,24,282,1,0,0,0,26,296,1,0,0,0,28,324,1,0,0,0,30,326,1,0,
        0,0,32,330,1,0,0,0,34,340,1,0,0,0,36,353,1,0,0,0,38,356,1,0,0,0,
        40,359,1,0,0,0,42,373,1,0,0,0,44,375,1,0,0,0,46,420,1,0,0,0,48,450,
        1,0,0,0,50,452,1,0,0,0,52,461,1,0,0,0,54,466,1,0,0,0,56,470,1,0,
        0,0,58,474,1,0,0,0,60,493,1,0,0,0,62,498,1,0,0,0,64,517,1,0,0,0,
        66,519,1,0,0,0,68,549,1,0,0,0,70,551,1,0,0,0,72,564,1,0,0,0,74,567,
        1,0,0,0,76,575,1,0,0,0,78,577,1,0,0,0,80,586,1,0,0,0,82,595,1,0,
        0,0,84,599,1,0,0,0,86,616,1,0,0,0,88,624,1,0,0,0,90,630,1,0,0,0,
        92,645,1,0,0,0,94,652,1,0,0,0,96,656,1,0,0,0,98,663,1,0,0,0,100,
        671,1,0,0,0,102,693,1,0,0,0,104,695,1,0,0,0,106,697,1,0,0,0,108,
        701,1,0,0,0,110,703,1,0,0,0,112,708,1,0,0,0,114,716,1,0,0,0,116,
        735,1,0,0,0,118,737,1,0,0,0,120,745,1,0,0,0,122,786,1,0,0,0,124,
        788,1,0,0,0,126,800,1,0,0,0,128,802,1,0,0,0,130,805,1,0,0,0,132,
        808,1,0,0,0,134,810,1,0,0,0,136,812,1,0,0,0,138,814,1,0,0,0,140,
        816,1,0,0,0,142,818,1,0,0,0,144,830,1,0,0,0,146,832,1,0,0,0,148,
        150,3,2,1,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,
        152,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,154,156,3,6,3,0,155,
        154,1,0,0,0,155,156,1,0,0,0,156,163,1,0,0,0,157,162,3,8,4,0,158,
        162,3,64,32,0,159,162,3,12,6,0,160,162,3,72,36,0,161,157,1,0,0,0,
        161,158,1,0,0,0,161,159,1,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,
        163,161,1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,
        166,168,3,24,12,0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,
        0,169,170,5,0,0,1,170,1,1,0,0,0,171,172,5,20,0,0,172,173,3,4,2,0,
        173,3,1,0,0,0,174,175,5,56,0,0,175,178,5,78,0,0,176,177,5,1,0,0,
        177,179,5,78,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,
        180,181,5,55,0,0,181,5,1,0,0,0,182,183,5,21,0,0,183,184,5,22,0,0,
        184,185,5,23,0,0,185,186,5,2,0,0,186,7,1,0,0,0,187,191,3,10,5,0,
        188,191,3,32,16,0,189,191,3,34,17,0,190,187,1,0,0,0,190,188,1,0,
        0,0,190,189,1,0,0,0,191,9,1,0,0,0,192,195,3,142,71,0,193,195,5,17,
        0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,197,5,78,
        0,0,197,199,5,3,0,0,198,200,3,16,8,0,199,198,1,0,0,0,199,200,1,0,
        0,0,200,201,1,0,0,0,201,210,5,4,0,0,202,203,5,74,0,0,203,205,3,26,
        13,0,204,206,3,62,31,0,205,204,1,0,0,0,205,206,1,0,0,0,206,207,1,
        0,0,0,207,208,5,74,0,0,208,211,1,0,0,0,209,211,5,2,0,0,210,202,1,
        0,0,0,210,209,1,0,0,0,211,11,1,0,0,0,212,213,5,46,0,0,213,225,5,
        78,0,0,214,215,5,74,0,0,215,216,5,44,0,0,216,222,5,78,0,0,217,218,
        5,5,0,0,218,219,5,44,0,0,219,221,5,78,0,0,220,217,1,0,0,0,221,224,
        1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,226,1,0,0,0,224,222,
        1,0,0,0,225,214,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,240,
        5,74,0,0,228,229,3,106,53,0,229,235,5,74,0,0,230,234,3,64,32,0,231,
        234,3,10,5,0,232,234,3,14,7,0,233,230,1,0,0,0,233,231,1,0,0,0,233,
        232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
        239,1,0,0,0,237,235,1,0,0,0,238,228,1,0,0,0,239,242,1,0,0,0,240,
        238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,
        244,5,74,0,0,244,245,5,2,0,0,245,13,1,0,0,0,246,247,5,78,0,0,247,
        249,5,3,0,0,248,250,3,16,8,0,249,248,1,0,0,0,249,250,1,0,0,0,250,
        251,1,0,0,0,251,252,5,4,0,0,252,253,5,74,0,0,253,254,3,26,13,0,254,
        255,5,74,0,0,255,15,1,0,0,0,256,261,3,18,9,0,257,258,5,5,0,0,258,
        260,3,18,9,0,259,257,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,
        262,1,0,0,0,262,17,1,0,0,0,263,261,1,0,0,0,264,265,3,142,71,0,265,
        266,3,126,63,0,266,19,1,0,0,0,267,268,5,78,0,0,268,270,5,3,0,0,269,
        271,3,22,11,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,
        273,5,4,0,0,273,21,1,0,0,0,274,279,3,108,54,0,275,276,5,5,0,0,276,
        278,3,108,54,0,277,275,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,
        280,1,0,0,0,280,23,1,0,0,0,281,279,1,0,0,0,282,283,5,11,0,0,283,
        284,5,18,0,0,284,285,5,3,0,0,285,286,5,4,0,0,286,287,5,6,0,0,287,
        288,3,26,13,0,288,289,5,19,0,0,289,290,3,108,54,0,290,291,5,2,0,
        0,291,292,5,7,0,0,292,25,1,0,0,0,293,295,3,28,14,0,294,293,1,0,0,
        0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,27,1,0,0,0,
        298,296,1,0,0,0,299,325,3,40,20,0,300,325,3,44,22,0,301,325,3,46,
        23,0,302,325,3,60,30,0,303,325,3,64,32,0,304,325,3,72,36,0,305,325,
        3,84,42,0,306,325,3,90,45,0,307,325,3,96,48,0,308,325,3,98,49,0,
        309,325,3,100,50,0,310,325,3,36,18,0,311,325,3,38,19,0,312,313,3,
        20,10,0,313,314,5,2,0,0,314,325,1,0,0,0,315,316,3,108,54,0,316,317,
        5,2,0,0,317,325,1,0,0,0,318,325,3,30,15,0,319,325,3,78,39,0,320,
        325,3,82,41,0,321,325,3,58,29,0,322,325,3,56,28,0,323,325,3,50,25,
        0,324,299,1,0,0,0,324,300,1,0,0,0,324,301,1,0,0,0,324,302,1,0,0,
        0,324,303,1,0,0,0,324,304,1,0,0,0,324,305,1,0,0,0,324,306,1,0,0,
        0,324,307,1,0,0,0,324,308,1,0,0,0,324,309,1,0,0,0,324,310,1,0,0,
        0,324,311,1,0,0,0,324,312,1,0,0,0,324,315,1,0,0,0,324,318,1,0,0,
        0,324,319,1,0,0,0,324,320,1,0,0,0,324,321,1,0,0,0,324,322,1,0,0,
        0,324,323,1,0,0,0,325,29,1,0,0,0,326,327,5,49,0,0,327,328,3,126,
        63,0,328,329,5,2,0,0,329,31,1,0,0,0,330,331,5,41,0,0,331,332,5,78,
        0,0,332,334,5,74,0,0,333,335,3,64,32,0,334,333,1,0,0,0,335,336,1,
        0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,5,
        74,0,0,339,33,1,0,0,0,340,341,5,42,0,0,341,342,5,78,0,0,342,343,
        5,74,0,0,343,348,5,78,0,0,344,345,5,5,0,0,345,347,5,78,0,0,346,344,
        1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,351,
        1,0,0,0,350,348,1,0,0,0,351,352,5,74,0,0,352,35,1,0,0,0,353,354,
        5,34,0,0,354,355,5,2,0,0,355,37,1,0,0,0,356,357,5,35,0,0,357,358,
        5,2,0,0,358,39,1,0,0,0,359,360,5,24,0,0,360,361,5,27,0,0,361,366,
        3,42,21,0,362,363,5,27,0,0,363,365,3,42,21,0,364,362,1,0,0,0,365,
        368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,
        366,1,0,0,0,369,370,5,2,0,0,370,41,1,0,0,0,371,374,3,108,54,0,372,
        374,5,26,0,0,373,371,1,0,0,0,373,372,1,0,0,0,374,43,1,0,0,0,375,
        376,5,25,0,0,376,377,5,28,0,0,377,378,3,126,63,0,378,379,5,2,0,0,
        379,45,1,0,0,0,380,381,3,126,63,0,381,382,5,8,0,0,382,383,3,108,
        54,0,383,384,5,2,0,0,384,421,1,0,0,0,385,388,5,78,0,0,386,389,5,
        8,0,0,387,389,3,136,68,0,388,386,1,0,0,0,388,387,1,0,0,0,389,390,
        1,0,0,0,390,391,3,110,55,0,391,392,5,2,0,0,392,421,1,0,0,0,393,394,
        3,126,63,0,394,395,5,9,0,0,395,396,3,108,54,0,396,403,5,10,0,0,397,
        398,5,9,0,0,398,399,3,108,54,0,399,400,5,10,0,0,400,402,1,0,0,0,
        401,397,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,
        404,408,1,0,0,0,405,403,1,0,0,0,406,409,5,8,0,0,407,409,3,136,68,
        0,408,406,1,0,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,411,3,108,
        54,0,411,412,5,2,0,0,412,421,1,0,0,0,413,414,3,126,63,0,414,415,
        3,136,68,0,415,416,3,108,54,0,416,417,5,2,0,0,417,421,1,0,0,0,418,
        421,3,48,24,0,419,421,3,52,26,0,420,380,1,0,0,0,420,385,1,0,0,0,
        420,393,1,0,0,0,420,413,1,0,0,0,420,418,1,0,0,0,420,419,1,0,0,0,
        421,47,1,0,0,0,422,425,3,54,27,0,423,426,5,8,0,0,424,426,3,136,68,
        0,425,423,1,0,0,0,425,424,1,0,0,0,426,427,1,0,0,0,427,428,3,108,
        54,0,428,429,5,2,0,0,429,451,1,0,0,0,430,431,3,54,27,0,431,432,5,
        9,0,0,432,433,3,108,54,0,433,440,5,10,0,0,434,435,5,9,0,0,435,436,
        3,108,54,0,436,437,5,10,0,0,437,439,1,0,0,0,438,434,1,0,0,0,439,
        442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,445,1,0,0,0,442,
        440,1,0,0,0,443,446,5,8,0,0,444,446,3,136,68,0,445,443,1,0,0,0,445,
        444,1,0,0,0,446,447,1,0,0,0,447,448,3,108,54,0,448,449,5,2,0,0,449,
        451,1,0,0,0,450,422,1,0,0,0,450,430,1,0,0,0,451,49,1,0,0,0,452,453,
        5,42,0,0,453,454,5,78,0,0,454,457,5,78,0,0,455,456,5,8,0,0,456,458,
        5,78,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,460,
        5,2,0,0,460,51,1,0,0,0,461,462,5,78,0,0,462,463,5,8,0,0,463,464,
        5,78,0,0,464,465,5,2,0,0,465,53,1,0,0,0,466,467,5,78,0,0,467,468,
        5,1,0,0,468,469,5,78,0,0,469,55,1,0,0,0,470,471,5,78,0,0,471,472,
        5,78,0,0,472,473,5,2,0,0,473,57,1,0,0,0,474,475,5,78,0,0,475,476,
        5,78,0,0,476,477,5,8,0,0,477,478,5,48,0,0,478,479,5,78,0,0,479,488,
        5,3,0,0,480,485,3,108,54,0,481,482,5,5,0,0,482,484,3,108,54,0,483,
        481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,
        489,1,0,0,0,487,485,1,0,0,0,488,480,1,0,0,0,488,489,1,0,0,0,489,
        490,1,0,0,0,490,491,5,4,0,0,491,492,5,2,0,0,492,59,1,0,0,0,493,494,
        5,78,0,0,494,495,5,1,0,0,495,496,3,20,10,0,496,497,5,2,0,0,497,61,
        1,0,0,0,498,499,5,19,0,0,499,500,3,108,54,0,500,501,5,2,0,0,501,
        63,1,0,0,0,502,503,3,142,71,0,503,510,3,74,37,0,504,508,5,8,0,0,
        505,509,3,108,54,0,506,507,5,48,0,0,507,509,3,142,71,0,508,505,1,
        0,0,0,508,506,1,0,0,0,509,511,1,0,0,0,510,504,1,0,0,0,510,511,1,
        0,0,0,511,512,1,0,0,0,512,513,5,2,0,0,513,518,1,0,0,0,514,515,3,
        66,33,0,515,516,5,2,0,0,516,518,1,0,0,0,517,502,1,0,0,0,517,514,
        1,0,0,0,518,65,1,0,0,0,519,520,3,142,71,0,520,521,3,126,63,0,521,
        522,5,9,0,0,522,523,3,108,54,0,523,530,5,10,0,0,524,525,5,9,0,0,
        525,526,3,108,54,0,526,527,5,10,0,0,527,529,1,0,0,0,528,524,1,0,
        0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,535,1,0,
        0,0,532,530,1,0,0,0,533,534,5,8,0,0,534,536,3,68,34,0,535,533,1,
        0,0,0,535,536,1,0,0,0,536,67,1,0,0,0,537,538,5,6,0,0,538,543,3,68,
        34,0,539,540,5,5,0,0,540,542,3,68,34,0,541,539,1,0,0,0,542,545,1,
        0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,
        0,0,0,546,547,5,7,0,0,547,550,1,0,0,0,548,550,3,108,54,0,549,537,
        1,0,0,0,549,548,1,0,0,0,550,69,1,0,0,0,551,552,3,142,71,0,552,553,
        3,130,65,0,553,554,5,8,0,0,554,561,3,126,63,0,555,556,5,9,0,0,556,
        557,3,108,54,0,557,558,5,10,0,0,558,560,1,0,0,0,559,555,1,0,0,0,
        560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,71,1,0,0,0,563,
        561,1,0,0,0,564,565,5,16,0,0,565,566,3,64,32,0,566,73,1,0,0,0,567,
        572,3,76,38,0,568,569,5,5,0,0,569,571,3,76,38,0,570,568,1,0,0,0,
        571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,75,1,0,0,0,574,
        572,1,0,0,0,575,576,3,126,63,0,576,77,1,0,0,0,577,578,5,50,0,0,578,
        579,5,74,0,0,579,580,3,26,13,0,580,582,5,74,0,0,581,583,3,80,40,
        0,582,581,1,0,0,0,583,584,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,
        0,585,79,1,0,0,0,586,587,5,51,0,0,587,588,5,3,0,0,588,589,5,78,0,
        0,589,590,5,78,0,0,590,591,5,4,0,0,591,592,5,74,0,0,592,593,3,26,
        13,0,593,594,5,74,0,0,594,81,1,0,0,0,595,596,5,52,0,0,596,597,3,
        108,54,0,597,598,5,2,0,0,598,83,1,0,0,0,599,600,5,29,0,0,600,601,
        3,132,66,0,601,602,5,74,0,0,602,603,5,6,0,0,603,604,3,26,13,0,604,
        614,5,7,0,0,605,607,3,86,43,0,606,605,1,0,0,0,607,610,1,0,0,0,608,
        606,1,0,0,0,608,609,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,611,
        613,3,88,44,0,612,611,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,
        608,1,0,0,0,614,615,1,0,0,0,615,85,1,0,0,0,616,617,5,30,0,0,617,
        618,5,29,0,0,618,619,3,132,66,0,619,620,5,74,0,0,620,621,5,6,0,0,
        621,622,3,26,13,0,622,623,5,7,0,0,623,87,1,0,0,0,624,625,5,30,0,
        0,625,626,5,74,0,0,626,627,5,6,0,0,627,628,3,26,13,0,628,629,5,7,
        0,0,629,89,1,0,0,0,630,631,5,31,0,0,631,632,3,108,54,0,632,633,5,
        74,0,0,633,637,5,6,0,0,634,636,3,92,46,0,635,634,1,0,0,0,636,639,
        1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,641,1,0,0,0,639,637,
        1,0,0,0,640,642,3,94,47,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,
        1,0,0,0,643,644,5,7,0,0,644,91,1,0,0,0,645,646,5,32,0,0,646,647,
        3,108,54,0,647,648,5,74,0,0,648,649,3,26,13,0,649,650,5,34,0,0,650,
        651,5,2,0,0,651,93,1,0,0,0,652,653,5,33,0,0,653,654,5,74,0,0,654,
        655,3,26,13,0,655,95,1,0,0,0,656,657,5,36,0,0,657,658,3,132,66,0,
        658,659,5,74,0,0,659,660,5,6,0,0,660,661,3,26,13,0,661,662,5,7,0,
        0,662,97,1,0,0,0,663,664,5,37,0,0,664,665,5,6,0,0,665,666,3,26,13,
        0,666,667,5,7,0,0,667,668,5,36,0,0,668,669,3,132,66,0,669,670,5,
        74,0,0,670,99,1,0,0,0,671,672,5,38,0,0,672,674,3,102,51,0,673,675,
        3,132,66,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,
        5,2,0,0,677,678,3,104,52,0,678,679,5,74,0,0,679,680,5,6,0,0,680,
        681,3,26,13,0,681,682,5,7,0,0,682,101,1,0,0,0,683,694,3,46,23,0,
        684,694,3,64,32,0,685,690,3,64,32,0,686,687,5,5,0,0,687,689,3,64,
        32,0,688,686,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,
        0,0,691,694,1,0,0,0,692,690,1,0,0,0,693,683,1,0,0,0,693,684,1,0,
        0,0,693,685,1,0,0,0,694,103,1,0,0,0,695,696,3,108,54,0,696,105,1,
        0,0,0,697,698,7,0,0,0,698,107,1,0,0,0,699,702,3,112,56,0,700,702,
        3,110,55,0,701,699,1,0,0,0,701,700,1,0,0,0,702,109,1,0,0,0,703,704,
        5,3,0,0,704,705,3,142,71,0,705,706,5,4,0,0,706,707,5,78,0,0,707,
        111,1,0,0,0,708,713,3,114,57,0,709,710,5,60,0,0,710,712,3,114,57,
        0,711,709,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,
        0,714,113,1,0,0,0,715,713,1,0,0,0,716,721,3,116,58,0,717,718,5,59,
        0,0,718,720,3,116,58,0,719,717,1,0,0,0,720,723,1,0,0,0,721,719,1,
        0,0,0,721,722,1,0,0,0,722,115,1,0,0,0,723,721,1,0,0,0,724,725,5,
        61,0,0,725,736,3,116,58,0,726,732,3,118,59,0,727,728,3,138,69,0,
        728,729,3,118,59,0,729,731,1,0,0,0,730,727,1,0,0,0,731,734,1,0,0,
        0,732,730,1,0,0,0,732,733,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,
        0,735,724,1,0,0,0,735,726,1,0,0,0,736,117,1,0,0,0,737,742,3,120,
        60,0,738,739,7,1,0,0,739,741,3,120,60,0,740,738,1,0,0,0,741,744,
        1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,119,1,0,0,0,744,742,
        1,0,0,0,745,750,3,122,61,0,746,747,7,2,0,0,747,749,3,122,61,0,748,
        746,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,
        121,1,0,0,0,752,750,1,0,0,0,753,754,5,67,0,0,754,787,3,126,63,0,
        755,756,5,68,0,0,756,787,3,126,63,0,757,758,3,126,63,0,758,759,5,
        67,0,0,759,787,1,0,0,0,760,761,3,126,63,0,761,762,5,68,0,0,762,787,
        1,0,0,0,763,787,5,80,0,0,764,787,5,79,0,0,765,787,3,126,63,0,766,
        787,5,81,0,0,767,772,3,126,63,0,768,769,5,9,0,0,769,770,3,118,59,
        0,770,771,5,10,0,0,771,773,1,0,0,0,772,768,1,0,0,0,773,774,1,0,0,
        0,774,772,1,0,0,0,774,775,1,0,0,0,775,787,1,0,0,0,776,777,5,3,0,
        0,777,778,3,118,59,0,778,779,5,4,0,0,779,787,1,0,0,0,780,787,5,39,
        0,0,781,787,5,40,0,0,782,787,3,20,10,0,783,787,3,54,27,0,784,787,
        3,124,62,0,785,787,3,60,30,0,786,753,1,0,0,0,786,755,1,0,0,0,786,
        757,1,0,0,0,786,760,1,0,0,0,786,763,1,0,0,0,786,764,1,0,0,0,786,
        765,1,0,0,0,786,766,1,0,0,0,786,767,1,0,0,0,786,776,1,0,0,0,786,
        780,1,0,0,0,786,781,1,0,0,0,786,782,1,0,0,0,786,783,1,0,0,0,786,
        784,1,0,0,0,786,785,1,0,0,0,787,123,1,0,0,0,788,793,3,54,27,0,789,
        790,5,9,0,0,790,791,3,108,54,0,791,792,5,10,0,0,792,794,1,0,0,0,
        793,789,1,0,0,0,794,795,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,
        796,125,1,0,0,0,797,801,5,78,0,0,798,801,3,128,64,0,799,801,3,130,
        65,0,800,797,1,0,0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,127,1,0,
        0,0,802,803,5,76,0,0,803,804,3,126,63,0,804,129,1,0,0,0,805,806,
        5,75,0,0,806,807,5,78,0,0,807,131,1,0,0,0,808,809,3,108,54,0,809,
        133,1,0,0,0,810,811,7,3,0,0,811,135,1,0,0,0,812,813,7,4,0,0,813,
        137,1,0,0,0,814,815,7,5,0,0,815,139,1,0,0,0,816,817,7,6,0,0,817,
        141,1,0,0,0,818,819,7,7,0,0,819,143,1,0,0,0,820,821,5,11,0,0,821,
        831,5,75,0,0,822,823,5,12,0,0,823,831,5,75,0,0,824,825,5,13,0,0,
        825,831,5,75,0,0,826,827,5,14,0,0,827,831,5,75,0,0,828,829,5,15,
        0,0,829,831,5,75,0,0,830,820,1,0,0,0,830,822,1,0,0,0,830,824,1,0,
        0,0,830,826,1,0,0,0,830,828,1,0,0,0,831,145,1,0,0,0,832,833,3,0,
        0,0,833,147,1,0,0,0,67,151,155,161,163,167,178,190,194,199,205,210,
        222,225,233,235,240,249,261,270,279,296,324,336,348,366,373,388,
        403,408,420,425,440,445,450,457,485,488,508,510,517,530,535,543,
        549,561,572,584,608,612,614,637,641,674,690,693,701,713,721,732,
        735,742,750,774,786,795,800,830
    ]

class joiParser ( Parser ):

    grammarFileName = "joi.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "';'", "'('", "')'", "','", "'{'", 
                     "'}'", "'='", "'['", "']'", "'int'", "'bool'", "'float'", 
                     "'char'", "'str'", "'constant'", "'void'", "'joi'", 
                     "'return'", "'#include'", "'using'", "'namespace'", 
                     "'std'", "'cout'", "'cin'", "'endl'", "'<<'", "'>>'", 
                     "'if'", "'else'", "'switch'", "'case'", "'default'", 
                     "'break'", "'continue'", "'while'", "'do'", "'for'", 
                     "'true'", "'false'", "'struct'", "'enum'", "'private'", 
                     "'public'", "'protected'", "'class'", "'virtual'", 
                     "'new'", "'delete'", "'try'", "'catch'", "'throw'", 
                     "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", 
                     "'||'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", 
                     "'--'", "'+='", "'-='", "'*='", "'/='", "'%='", "':'", 
                     "'&'", "'$'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "INT", "BOOL", 
                      "FLOAT", "CHAR", "STR", "CONST", "VOID", "MAIN", "RETURN", 
                      "INCLUDE", "USING", "NAMESPACE", "STD", "COUT", "CIN", 
                      "ENDL", "LT", "GT", "IF", "ELSE", "SWITCH", "CASE", 
                      "DEFAULT", "BREAK", "CONTINUE", "WHILE", "DO", "FOR", 
                      "TRUE", "FALSE", "STRUCT", "ENUM", "PRIVATE", "PUBLIC", 
                      "PROTECTED", "CLASS", "VIRTUAL", "NEW", "DELETE", 
                      "TRY", "CATCH", "THROW", "EQ", "NEQ", "GT_OP", "LT_OP", 
                      "GTE", "LTE", "AND", "OR", "NOT", "ADD", "SUB", "MUL", 
                      "DIV", "MOD", "INC", "DEC", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "COLON", 
                      "AMPERSAND", "DOLLAR", "COMMENT", "IDENTIFIER", "CHAR_LITERAL", 
                      "STRING", "NUMBER", "WS" ]

    RULE_program = 0
    RULE_includeStmt = 1
    RULE_header = 2
    RULE_usingStmt = 3
    RULE_functionDefOrStructDefOrEnumDef = 4
    RULE_functionDef = 5
    RULE_classDef = 6
    RULE_constructor = 7
    RULE_paramList = 8
    RULE_param = 9
    RULE_functionCall = 10
    RULE_argList = 11
    RULE_mainFunction = 12
    RULE_statements = 13
    RULE_statement = 14
    RULE_deleteStmt = 15
    RULE_structDef = 16
    RULE_enumDef = 17
    RULE_breakStmt = 18
    RULE_continueStmt = 19
    RULE_printStmt = 20
    RULE_printExpressionList = 21
    RULE_inputStmt = 22
    RULE_assignStmt = 23
    RULE_structAssignStmt = 24
    RULE_enumDeclarationStmt = 25
    RULE_enumAccessStmt = 26
    RULE_structAccessStmt = 27
    RULE_structDeclarationStmt = 28
    RULE_objectDeclarationStmt = 29
    RULE_classFunctionAccessStmt = 30
    RULE_returnStmt = 31
    RULE_declarationStmt = 32
    RULE_arrayDeclarationStmt = 33
    RULE_arrayValueAssigning = 34
    RULE_referenceDeclarationStmt = 35
    RULE_constDeclarationStmt = 36
    RULE_varList = 37
    RULE_var = 38
    RULE_tryCatchStmt = 39
    RULE_catchBlock = 40
    RULE_throwStmt = 41
    RULE_ifStmt = 42
    RULE_elseIfStmt = 43
    RULE_elseStmt = 44
    RULE_switchStmt = 45
    RULE_caseStmt = 46
    RULE_defaultStmt = 47
    RULE_whileStmt = 48
    RULE_doWhileStmt = 49
    RULE_forStmt = 50
    RULE_forInit = 51
    RULE_forUpdate = 52
    RULE_accessSpecifier = 53
    RULE_expression = 54
    RULE_typecastExpr = 55
    RULE_logicalOrExpression = 56
    RULE_logicalAndExpression = 57
    RULE_rel_expr = 58
    RULE_expr = 59
    RULE_term = 60
    RULE_factor = 61
    RULE_structAccessForArrayStmt = 62
    RULE_idOrPointerOrAddrId = 63
    RULE_pointer = 64
    RULE_address_identifier = 65
    RULE_condition = 66
    RULE_arithmeticOp = 67
    RULE_assignOp = 68
    RULE_comparisonOp = 69
    RULE_logicalOp = 70
    RULE_dataType = 71
    RULE_referenceDataType = 72
    RULE_main = 73

    ruleNames =  [ "program", "includeStmt", "header", "usingStmt", "functionDefOrStructDefOrEnumDef", 
                   "functionDef", "classDef", "constructor", "paramList", 
                   "param", "functionCall", "argList", "mainFunction", "statements", 
                   "statement", "deleteStmt", "structDef", "enumDef", "breakStmt", 
                   "continueStmt", "printStmt", "printExpressionList", "inputStmt", 
                   "assignStmt", "structAssignStmt", "enumDeclarationStmt", 
                   "enumAccessStmt", "structAccessStmt", "structDeclarationStmt", 
                   "objectDeclarationStmt", "classFunctionAccessStmt", "returnStmt", 
                   "declarationStmt", "arrayDeclarationStmt", "arrayValueAssigning", 
                   "referenceDeclarationStmt", "constDeclarationStmt", "varList", 
                   "var", "tryCatchStmt", "catchBlock", "throwStmt", "ifStmt", 
                   "elseIfStmt", "elseStmt", "switchStmt", "caseStmt", "defaultStmt", 
                   "whileStmt", "doWhileStmt", "forStmt", "forInit", "forUpdate", 
                   "accessSpecifier", "expression", "typecastExpr", "logicalOrExpression", 
                   "logicalAndExpression", "rel_expr", "expr", "term", "factor", 
                   "structAccessForArrayStmt", "idOrPointerOrAddrId", "pointer", 
                   "address_identifier", "condition", "arithmeticOp", "assignOp", 
                   "comparisonOp", "logicalOp", "dataType", "referenceDataType", 
                   "main" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    INT=11
    BOOL=12
    FLOAT=13
    CHAR=14
    STR=15
    CONST=16
    VOID=17
    MAIN=18
    RETURN=19
    INCLUDE=20
    USING=21
    NAMESPACE=22
    STD=23
    COUT=24
    CIN=25
    ENDL=26
    LT=27
    GT=28
    IF=29
    ELSE=30
    SWITCH=31
    CASE=32
    DEFAULT=33
    BREAK=34
    CONTINUE=35
    WHILE=36
    DO=37
    FOR=38
    TRUE=39
    FALSE=40
    STRUCT=41
    ENUM=42
    PRIVATE=43
    PUBLIC=44
    PROTECTED=45
    CLASS=46
    VIRTUAL=47
    NEW=48
    DELETE=49
    TRY=50
    CATCH=51
    THROW=52
    EQ=53
    NEQ=54
    GT_OP=55
    LT_OP=56
    GTE=57
    LTE=58
    AND=59
    OR=60
    NOT=61
    ADD=62
    SUB=63
    MUL=64
    DIV=65
    MOD=66
    INC=67
    DEC=68
    PLUS_ASSIGN=69
    MINUS_ASSIGN=70
    MUL_ASSIGN=71
    DIV_ASSIGN=72
    MOD_ASSIGN=73
    COLON=74
    AMPERSAND=75
    DOLLAR=76
    COMMENT=77
    IDENTIFIER=78
    CHAR_LITERAL=79
    STRING=80
    NUMBER=81
    WS=82

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(joiParser.EOF, 0)

        def includeStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.IncludeStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.IncludeStmtContext,i)


        def usingStmt(self):
            return self.getTypedRuleContext(joiParser.UsingStmtContext,0)


        def functionDefOrStructDefOrEnumDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.FunctionDefOrStructDefOrEnumDefContext)
            else:
                return self.getTypedRuleContext(joiParser.FunctionDefOrStructDefOrEnumDefContext,i)


        def declarationStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.DeclarationStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.DeclarationStmtContext,i)


        def classDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ClassDefContext)
            else:
                return self.getTypedRuleContext(joiParser.ClassDefContext,i)


        def constDeclarationStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ConstDeclarationStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.ConstDeclarationStmtContext,i)


        def mainFunction(self):
            return self.getTypedRuleContext(joiParser.MainFunctionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = joiParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20:
                self.state = 148
                self.includeStmt()
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 154
                self.usingStmt()


            self.state = 163
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 161
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 157
                        self.functionDefOrStructDefOrEnumDef()
                        pass

                    elif la_ == 2:
                        self.state = 158
                        self.declarationStmt()
                        pass

                    elif la_ == 3:
                        self.state = 159
                        self.classDef()
                        pass

                    elif la_ == 4:
                        self.state = 160
                        self.constDeclarationStmt()
                        pass

             
                self.state = 165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 166
                self.mainFunction()


            self.state = 169
            self.match(joiParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(joiParser.INCLUDE, 0)

        def header(self):
            return self.getTypedRuleContext(joiParser.HeaderContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_includeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStmt" ):
                listener.enterIncludeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStmt" ):
                listener.exitIncludeStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeStmt" ):
                return visitor.visitIncludeStmt(self)
            else:
                return visitor.visitChildren(self)




    def includeStmt(self):

        localctx = joiParser.IncludeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_includeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self.match(joiParser.INCLUDE)
            self.state = 172
            self.header()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT_OP(self):
            return self.getToken(joiParser.LT_OP, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def GT_OP(self):
            return self.getToken(joiParser.GT_OP, 0)

        def getRuleIndex(self):
            return joiParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = joiParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(joiParser.LT_OP)
            self.state = 175
            self.match(joiParser.IDENTIFIER)
            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 176
                self.match(joiParser.T__0)
                self.state = 177
                self.match(joiParser.IDENTIFIER)


            self.state = 180
            self.match(joiParser.GT_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(joiParser.USING, 0)

        def NAMESPACE(self):
            return self.getToken(joiParser.NAMESPACE, 0)

        def STD(self):
            return self.getToken(joiParser.STD, 0)

        def getRuleIndex(self):
            return joiParser.RULE_usingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStmt" ):
                listener.enterUsingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStmt" ):
                listener.exitUsingStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingStmt" ):
                return visitor.visitUsingStmt(self)
            else:
                return visitor.visitChildren(self)




    def usingStmt(self):

        localctx = joiParser.UsingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_usingStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(joiParser.USING)
            self.state = 183
            self.match(joiParser.NAMESPACE)
            self.state = 184
            self.match(joiParser.STD)
            self.state = 185
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefOrStructDefOrEnumDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(joiParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(joiParser.StructDefContext,0)


        def enumDef(self):
            return self.getTypedRuleContext(joiParser.EnumDefContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_functionDefOrStructDefOrEnumDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefOrStructDefOrEnumDef" ):
                listener.enterFunctionDefOrStructDefOrEnumDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefOrStructDefOrEnumDef" ):
                listener.exitFunctionDefOrStructDefOrEnumDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefOrStructDefOrEnumDef" ):
                return visitor.visitFunctionDefOrStructDefOrEnumDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDefOrStructDefOrEnumDef(self):

        localctx = joiParser.FunctionDefOrStructDefOrEnumDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_functionDefOrStructDefOrEnumDef)
        try:
            self.state = 190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 12, 13, 14, 15, 17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 187
                self.functionDef()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 188
                self.structDef()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 189
                self.enumDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def dataType(self):
            return self.getTypedRuleContext(joiParser.DataTypeContext,0)


        def VOID(self):
            return self.getToken(joiParser.VOID, 0)

        def paramList(self):
            return self.getTypedRuleContext(joiParser.ParamListContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(joiParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = joiParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 12, 13, 14, 15]:
                self.state = 192
                self.dataType()
                pass
            elif token in [17]:
                self.state = 193
                self.match(joiParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 196
            self.match(joiParser.IDENTIFIER)
            self.state = 197
            self.match(joiParser.T__2)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0):
                self.state = 198
                self.paramList()


            self.state = 201
            self.match(joiParser.T__3)
            self.state = 210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.state = 202
                self.match(joiParser.COLON)
                self.state = 203
                self.statements()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 204
                    self.returnStmt()


                self.state = 207
                self.match(joiParser.COLON)
                pass
            elif token in [2]:
                self.state = 209
                self.match(joiParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(joiParser.CLASS, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def PUBLIC(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.PUBLIC)
            else:
                return self.getToken(joiParser.PUBLIC, i)

        def accessSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.AccessSpecifierContext)
            else:
                return self.getTypedRuleContext(joiParser.AccessSpecifierContext,i)


        def declarationStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.DeclarationStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.DeclarationStmtContext,i)


        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(joiParser.FunctionDefContext,i)


        def constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ConstructorContext)
            else:
                return self.getTypedRuleContext(joiParser.ConstructorContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_classDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDef" ):
                listener.enterClassDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDef" ):
                listener.exitClassDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDef" ):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = joiParser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(joiParser.CLASS)
            self.state = 213
            self.match(joiParser.IDENTIFIER)
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 214
                self.match(joiParser.COLON)
                self.state = 215
                self.match(joiParser.PUBLIC)
                self.state = 216
                self.match(joiParser.IDENTIFIER)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 217
                    self.match(joiParser.T__4)
                    self.state = 218
                    self.match(joiParser.PUBLIC)
                    self.state = 219
                    self.match(joiParser.IDENTIFIER)
                    self.state = 224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 227
            self.match(joiParser.COLON)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 61572651155456) != 0):
                self.state = 228
                self.accessSpecifier()
                self.state = 229
                self.match(joiParser.COLON)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 194560) != 0) or _la==78:
                    self.state = 233
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 230
                        self.declarationStmt()
                        pass

                    elif la_ == 2:
                        self.state = 231
                        self.functionDef()
                        pass

                    elif la_ == 3:
                        self.state = 232
                        self.constructor()
                        pass


                    self.state = 237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self.match(joiParser.COLON)
            self.state = 244
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def paramList(self):
            return self.getTypedRuleContext(joiParser.ParamListContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor" ):
                listener.enterConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor" ):
                listener.exitConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor" ):
                return visitor.visitConstructor(self)
            else:
                return visitor.visitChildren(self)




    def constructor(self):

        localctx = joiParser.ConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(joiParser.IDENTIFIER)
            self.state = 247
            self.match(joiParser.T__2)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0):
                self.state = 248
                self.paramList()


            self.state = 251
            self.match(joiParser.T__3)
            self.state = 252
            self.match(joiParser.COLON)
            self.state = 253
            self.statements()
            self.state = 254
            self.match(joiParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ParamContext)
            else:
                return self.getTypedRuleContext(joiParser.ParamContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = joiParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.param()
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 257
                self.match(joiParser.T__4)
                self.state = 258
                self.param()
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(joiParser.DataTypeContext,0)


        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = joiParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.dataType()
            self.state = 265
            self.idOrPointerOrAddrId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def argList(self):
            return self.getTypedRuleContext(joiParser.ArgListContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = joiParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(joiParser.IDENTIFIER)
            self.state = 268
            self.match(joiParser.T__2)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305844658481135624) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 31491) != 0):
                self.state = 269
                self.argList()


            self.state = 272
            self.match(joiParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgList" ):
                return visitor.visitArgList(self)
            else:
                return visitor.visitChildren(self)




    def argList(self):

        localctx = joiParser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.expression()
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 275
                self.match(joiParser.T__4)
                self.state = 276
                self.expression()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(joiParser.INT, 0)

        def MAIN(self):
            return self.getToken(joiParser.MAIN, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def RETURN(self):
            return self.getToken(joiParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_mainFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMainFunction" ):
                listener.enterMainFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMainFunction" ):
                listener.exitMainFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMainFunction" ):
                return visitor.visitMainFunction(self)
            else:
                return visitor.visitChildren(self)




    def mainFunction(self):

        localctx = joiParser.MainFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_mainFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(joiParser.INT)
            self.state = 283
            self.match(joiParser.MAIN)
            self.state = 284
            self.match(joiParser.T__2)
            self.state = 285
            self.match(joiParser.T__3)
            self.state = 286
            self.match(joiParser.T__5)
            self.state = 287
            self.statements()
            self.state = 288
            self.match(joiParser.RETURN)
            self.state = 289
            self.expression()
            self.state = 290
            self.match(joiParser.T__1)
            self.state = 291
            self.match(joiParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.StatementContext)
            else:
                return self.getTypedRuleContext(joiParser.StatementContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = joiParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 293
                    self.statement() 
                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printStmt(self):
            return self.getTypedRuleContext(joiParser.PrintStmtContext,0)


        def inputStmt(self):
            return self.getTypedRuleContext(joiParser.InputStmtContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(joiParser.AssignStmtContext,0)


        def classFunctionAccessStmt(self):
            return self.getTypedRuleContext(joiParser.ClassFunctionAccessStmtContext,0)


        def declarationStmt(self):
            return self.getTypedRuleContext(joiParser.DeclarationStmtContext,0)


        def constDeclarationStmt(self):
            return self.getTypedRuleContext(joiParser.ConstDeclarationStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(joiParser.IfStmtContext,0)


        def switchStmt(self):
            return self.getTypedRuleContext(joiParser.SwitchStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(joiParser.WhileStmtContext,0)


        def doWhileStmt(self):
            return self.getTypedRuleContext(joiParser.DoWhileStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(joiParser.ForStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(joiParser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(joiParser.ContinueStmtContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(joiParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def deleteStmt(self):
            return self.getTypedRuleContext(joiParser.DeleteStmtContext,0)


        def tryCatchStmt(self):
            return self.getTypedRuleContext(joiParser.TryCatchStmtContext,0)


        def throwStmt(self):
            return self.getTypedRuleContext(joiParser.ThrowStmtContext,0)


        def objectDeclarationStmt(self):
            return self.getTypedRuleContext(joiParser.ObjectDeclarationStmtContext,0)


        def structDeclarationStmt(self):
            return self.getTypedRuleContext(joiParser.StructDeclarationStmtContext,0)


        def enumDeclarationStmt(self):
            return self.getTypedRuleContext(joiParser.EnumDeclarationStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = joiParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_statement)
        try:
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 299
                self.printStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.inputStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 301
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 302
                self.classFunctionAccessStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 303
                self.declarationStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 304
                self.constDeclarationStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 305
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 306
                self.switchStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 307
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 308
                self.doWhileStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 309
                self.forStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 310
                self.breakStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 311
                self.continueStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 312
                self.functionCall()
                self.state = 313
                self.match(joiParser.T__1)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 315
                self.expression()
                self.state = 316
                self.match(joiParser.T__1)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 318
                self.deleteStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 319
                self.tryCatchStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 320
                self.throwStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 321
                self.objectDeclarationStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 322
                self.structDeclarationStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 323
                self.enumDeclarationStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(joiParser.DELETE, 0)

        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_deleteStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStmt" ):
                listener.enterDeleteStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStmt" ):
                listener.exitDeleteStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStmt" ):
                return visitor.visitDeleteStmt(self)
            else:
                return visitor.visitChildren(self)




    def deleteStmt(self):

        localctx = joiParser.DeleteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_deleteStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(joiParser.DELETE)
            self.state = 327
            self.idOrPointerOrAddrId()
            self.state = 328
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(joiParser.STRUCT, 0)

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def declarationStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.DeclarationStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.DeclarationStmtContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = joiParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(joiParser.STRUCT)
            self.state = 331
            self.match(joiParser.IDENTIFIER)
            self.state = 332
            self.match(joiParser.COLON)
            self.state = 334 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 333
                self.declarationStmt()
                self.state = 336 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0)):
                    break

            self.state = 338
            self.match(joiParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(joiParser.ENUM, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def getRuleIndex(self):
            return joiParser.RULE_enumDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDef" ):
                listener.enterEnumDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDef" ):
                listener.exitEnumDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDef" ):
                return visitor.visitEnumDef(self)
            else:
                return visitor.visitChildren(self)




    def enumDef(self):

        localctx = joiParser.EnumDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_enumDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(joiParser.ENUM)
            self.state = 341
            self.match(joiParser.IDENTIFIER)
            self.state = 342
            self.match(joiParser.COLON)
            self.state = 343
            self.match(joiParser.IDENTIFIER)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 344
                self.match(joiParser.T__4)
                self.state = 345
                self.match(joiParser.IDENTIFIER)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 351
            self.match(joiParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(joiParser.BREAK, 0)

        def getRuleIndex(self):
            return joiParser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStmt" ):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)




    def breakStmt(self):

        localctx = joiParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(joiParser.BREAK)
            self.state = 354
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(joiParser.CONTINUE, 0)

        def getRuleIndex(self):
            return joiParser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStmt" ):
                return visitor.visitContinueStmt(self)
            else:
                return visitor.visitChildren(self)




    def continueStmt(self):

        localctx = joiParser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(joiParser.CONTINUE)
            self.state = 357
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUT(self):
            return self.getToken(joiParser.COUT, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.LT)
            else:
                return self.getToken(joiParser.LT, i)

        def printExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.PrintExpressionListContext)
            else:
                return self.getTypedRuleContext(joiParser.PrintExpressionListContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStmt" ):
                return visitor.visitPrintStmt(self)
            else:
                return visitor.visitChildren(self)




    def printStmt(self):

        localctx = joiParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(joiParser.COUT)
            self.state = 360
            self.match(joiParser.LT)
            self.state = 361
            self.printExpressionList()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 362
                self.match(joiParser.LT)
                self.state = 363
                self.printExpressionList()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 369
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def ENDL(self):
            return self.getToken(joiParser.ENDL, 0)

        def getRuleIndex(self):
            return joiParser.RULE_printExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintExpressionList" ):
                listener.enterPrintExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintExpressionList" ):
                listener.exitPrintExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintExpressionList" ):
                return visitor.visitPrintExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def printExpressionList(self):

        localctx = joiParser.PrintExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_printExpressionList)
        try:
            self.state = 373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 39, 40, 61, 67, 68, 75, 76, 78, 79, 80, 81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self.expression()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 372
                self.match(joiParser.ENDL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIN(self):
            return self.getToken(joiParser.CIN, 0)

        def GT(self):
            return self.getToken(joiParser.GT, 0)

        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_inputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStmt" ):
                listener.enterInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStmt" ):
                listener.exitInputStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputStmt" ):
                return visitor.visitInputStmt(self)
            else:
                return visitor.visitChildren(self)




    def inputStmt(self):

        localctx = joiParser.InputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inputStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(joiParser.CIN)
            self.state = 376
            self.match(joiParser.GT)
            self.state = 377
            self.idOrPointerOrAddrId()
            self.state = 378
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def typecastExpr(self):
            return self.getTypedRuleContext(joiParser.TypecastExprContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(joiParser.AssignOpContext,0)


        def structAssignStmt(self):
            return self.getTypedRuleContext(joiParser.StructAssignStmtContext,0)


        def enumAccessStmt(self):
            return self.getTypedRuleContext(joiParser.EnumAccessStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = joiParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.idOrPointerOrAddrId()
                self.state = 381
                self.match(joiParser.T__7)
                self.state = 382
                self.expression()
                self.state = 383
                self.match(joiParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 385
                self.match(joiParser.IDENTIFIER)
                self.state = 388
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8]:
                    self.state = 386
                    self.match(joiParser.T__7)
                    pass
                elif token in [69, 70, 71, 72, 73]:
                    self.state = 387
                    self.assignOp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 390
                self.typecastExpr()
                self.state = 391
                self.match(joiParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 393
                self.idOrPointerOrAddrId()
                self.state = 394
                self.match(joiParser.T__8)
                self.state = 395
                self.expression()
                self.state = 396
                self.match(joiParser.T__9)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 397
                    self.match(joiParser.T__8)
                    self.state = 398
                    self.expression()
                    self.state = 399
                    self.match(joiParser.T__9)
                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 408
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8]:
                    self.state = 406
                    self.match(joiParser.T__7)
                    pass
                elif token in [69, 70, 71, 72, 73]:
                    self.state = 407
                    self.assignOp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 410
                self.expression()
                self.state = 411
                self.match(joiParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 413
                self.idOrPointerOrAddrId()
                self.state = 414
                self.assignOp()
                self.state = 415
                self.expression()
                self.state = 416
                self.match(joiParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 418
                self.structAssignStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 419
                self.enumAccessStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructAssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structAccessStmt(self):
            return self.getTypedRuleContext(joiParser.StructAccessStmtContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def assignOp(self):
            return self.getTypedRuleContext(joiParser.AssignOpContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_structAssignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructAssignStmt" ):
                listener.enterStructAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructAssignStmt" ):
                listener.exitStructAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructAssignStmt" ):
                return visitor.visitStructAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def structAssignStmt(self):

        localctx = joiParser.StructAssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_structAssignStmt)
        self._la = 0 # Token type
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.structAccessStmt()
                self.state = 425
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8]:
                    self.state = 423
                    self.match(joiParser.T__7)
                    pass
                elif token in [69, 70, 71, 72, 73]:
                    self.state = 424
                    self.assignOp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 427
                self.expression()
                self.state = 428
                self.match(joiParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.structAccessStmt()
                self.state = 431
                self.match(joiParser.T__8)
                self.state = 432
                self.expression()
                self.state = 433
                self.match(joiParser.T__9)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 434
                    self.match(joiParser.T__8)
                    self.state = 435
                    self.expression()
                    self.state = 436
                    self.match(joiParser.T__9)
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8]:
                    self.state = 443
                    self.match(joiParser.T__7)
                    pass
                elif token in [69, 70, 71, 72, 73]:
                    self.state = 444
                    self.assignOp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 447
                self.expression()
                self.state = 448
                self.match(joiParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(joiParser.ENUM, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return joiParser.RULE_enumDeclarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclarationStmt" ):
                listener.enterEnumDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclarationStmt" ):
                listener.exitEnumDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclarationStmt" ):
                return visitor.visitEnumDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclarationStmt(self):

        localctx = joiParser.EnumDeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumDeclarationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(joiParser.ENUM)
            self.state = 453
            self.match(joiParser.IDENTIFIER)
            self.state = 454
            self.match(joiParser.IDENTIFIER)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 455
                self.match(joiParser.T__7)
                self.state = 456
                self.match(joiParser.IDENTIFIER)


            self.state = 459
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumAccessStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return joiParser.RULE_enumAccessStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumAccessStmt" ):
                listener.enterEnumAccessStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumAccessStmt" ):
                listener.exitEnumAccessStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumAccessStmt" ):
                return visitor.visitEnumAccessStmt(self)
            else:
                return visitor.visitChildren(self)




    def enumAccessStmt(self):

        localctx = joiParser.EnumAccessStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumAccessStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(joiParser.IDENTIFIER)
            self.state = 462
            self.match(joiParser.T__7)
            self.state = 463
            self.match(joiParser.IDENTIFIER)
            self.state = 464
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructAccessStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return joiParser.RULE_structAccessStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructAccessStmt" ):
                listener.enterStructAccessStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructAccessStmt" ):
                listener.exitStructAccessStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructAccessStmt" ):
                return visitor.visitStructAccessStmt(self)
            else:
                return visitor.visitChildren(self)




    def structAccessStmt(self):

        localctx = joiParser.StructAccessStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_structAccessStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(joiParser.IDENTIFIER)
            self.state = 467
            self.match(joiParser.T__0)
            self.state = 468
            self.match(joiParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return joiParser.RULE_structDeclarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationStmt" ):
                listener.enterStructDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationStmt" ):
                listener.exitStructDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarationStmt" ):
                return visitor.visitStructDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarationStmt(self):

        localctx = joiParser.StructDeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structDeclarationStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(joiParser.IDENTIFIER)
            self.state = 471
            self.match(joiParser.IDENTIFIER)
            self.state = 472
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def NEW(self):
            return self.getToken(joiParser.NEW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_objectDeclarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclarationStmt" ):
                listener.enterObjectDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclarationStmt" ):
                listener.exitObjectDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDeclarationStmt" ):
                return visitor.visitObjectDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def objectDeclarationStmt(self):

        localctx = joiParser.ObjectDeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_objectDeclarationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(joiParser.IDENTIFIER)
            self.state = 475
            self.match(joiParser.IDENTIFIER)
            self.state = 476
            self.match(joiParser.T__7)
            self.state = 477
            self.match(joiParser.NEW)
            self.state = 478
            self.match(joiParser.IDENTIFIER)
            self.state = 479
            self.match(joiParser.T__2)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305844658481135624) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 31491) != 0):
                self.state = 480
                self.expression()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 481
                    self.match(joiParser.T__4)
                    self.state = 482
                    self.expression()
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 490
            self.match(joiParser.T__3)
            self.state = 491
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassFunctionAccessStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def functionCall(self):
            return self.getTypedRuleContext(joiParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_classFunctionAccessStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassFunctionAccessStmt" ):
                listener.enterClassFunctionAccessStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassFunctionAccessStmt" ):
                listener.exitClassFunctionAccessStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassFunctionAccessStmt" ):
                return visitor.visitClassFunctionAccessStmt(self)
            else:
                return visitor.visitChildren(self)




    def classFunctionAccessStmt(self):

        localctx = joiParser.ClassFunctionAccessStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_classFunctionAccessStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(joiParser.IDENTIFIER)
            self.state = 494
            self.match(joiParser.T__0)
            self.state = 495
            self.functionCall()
            self.state = 496
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(joiParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = joiParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(joiParser.RETURN)
            self.state = 499
            self.expression()
            self.state = 500
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(joiParser.DataTypeContext,i)


        def varList(self):
            return self.getTypedRuleContext(joiParser.VarListContext,0)


        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def NEW(self):
            return self.getToken(joiParser.NEW, 0)

        def arrayDeclarationStmt(self):
            return self.getTypedRuleContext(joiParser.ArrayDeclarationStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_declarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStmt" ):
                listener.enterDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStmt" ):
                listener.exitDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationStmt" ):
                return visitor.visitDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def declarationStmt(self):

        localctx = joiParser.DeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_declarationStmt)
        self._la = 0 # Token type
        try:
            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.dataType()
                self.state = 503
                self.varList()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 504
                    self.match(joiParser.T__7)
                    self.state = 508
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 39, 40, 61, 67, 68, 75, 76, 78, 79, 80, 81]:
                        self.state = 505
                        self.expression()
                        pass
                    elif token in [48]:
                        self.state = 506
                        self.match(joiParser.NEW)
                        self.state = 507
                        self.dataType()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 512
                self.match(joiParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.arrayDeclarationStmt()
                self.state = 515
                self.match(joiParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(joiParser.DataTypeContext,0)


        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def arrayValueAssigning(self):
            return self.getTypedRuleContext(joiParser.ArrayValueAssigningContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_arrayDeclarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclarationStmt" ):
                listener.enterArrayDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclarationStmt" ):
                listener.exitArrayDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclarationStmt" ):
                return visitor.visitArrayDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclarationStmt(self):

        localctx = joiParser.ArrayDeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arrayDeclarationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.dataType()
            self.state = 520
            self.idOrPointerOrAddrId()
            self.state = 521
            self.match(joiParser.T__8)
            self.state = 522
            self.expression()
            self.state = 523
            self.match(joiParser.T__9)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 524
                self.match(joiParser.T__8)
                self.state = 525
                self.expression()
                self.state = 526
                self.match(joiParser.T__9)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 533
                self.match(joiParser.T__7)
                self.state = 534
                self.arrayValueAssigning()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayValueAssigningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayValueAssigning(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ArrayValueAssigningContext)
            else:
                return self.getTypedRuleContext(joiParser.ArrayValueAssigningContext,i)


        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_arrayValueAssigning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayValueAssigning" ):
                listener.enterArrayValueAssigning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayValueAssigning" ):
                listener.exitArrayValueAssigning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayValueAssigning" ):
                return visitor.visitArrayValueAssigning(self)
            else:
                return visitor.visitChildren(self)




    def arrayValueAssigning(self):

        localctx = joiParser.ArrayValueAssigningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayValueAssigning)
        self._la = 0 # Token type
        try:
            self.state = 549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.match(joiParser.T__5)
                self.state = 538
                self.arrayValueAssigning()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 539
                    self.match(joiParser.T__4)
                    self.state = 540
                    self.arrayValueAssigning()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self.match(joiParser.T__6)
                pass
            elif token in [3, 39, 40, 61, 67, 68, 75, 76, 78, 79, 80, 81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(joiParser.DataTypeContext,0)


        def address_identifier(self):
            return self.getTypedRuleContext(joiParser.Address_identifierContext,0)


        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_referenceDeclarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDeclarationStmt" ):
                listener.enterReferenceDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDeclarationStmt" ):
                listener.exitReferenceDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceDeclarationStmt" ):
                return visitor.visitReferenceDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def referenceDeclarationStmt(self):

        localctx = joiParser.ReferenceDeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_referenceDeclarationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.dataType()
            self.state = 552
            self.address_identifier()
            self.state = 553
            self.match(joiParser.T__7)
            self.state = 554
            self.idOrPointerOrAddrId()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 555
                self.match(joiParser.T__8)
                self.state = 556
                self.expression()
                self.state = 557
                self.match(joiParser.T__9)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(joiParser.CONST, 0)

        def declarationStmt(self):
            return self.getTypedRuleContext(joiParser.DeclarationStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_constDeclarationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclarationStmt" ):
                listener.enterConstDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclarationStmt" ):
                listener.exitConstDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclarationStmt" ):
                return visitor.visitConstDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)




    def constDeclarationStmt(self):

        localctx = joiParser.ConstDeclarationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_constDeclarationStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(joiParser.CONST)
            self.state = 565
            self.declarationStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.VarContext)
            else:
                return self.getTypedRuleContext(joiParser.VarContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_varList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarList" ):
                listener.enterVarList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarList" ):
                listener.exitVarList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarList" ):
                return visitor.visitVarList(self)
            else:
                return visitor.visitChildren(self)




    def varList(self):

        localctx = joiParser.VarListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_varList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.var()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 568
                self.match(joiParser.T__4)
                self.state = 569
                self.var()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar" ):
                return visitor.visitVar(self)
            else:
                return visitor.visitChildren(self)




    def var(self):

        localctx = joiParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.idOrPointerOrAddrId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(joiParser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(joiParser.CatchBlockContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_tryCatchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchStmt" ):
                listener.enterTryCatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchStmt" ):
                listener.exitTryCatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchStmt" ):
                return visitor.visitTryCatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchStmt(self):

        localctx = joiParser.TryCatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tryCatchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(joiParser.TRY)
            self.state = 578
            self.match(joiParser.COLON)
            self.state = 579
            self.statements()
            self.state = 580
            self.match(joiParser.COLON)
            self.state = 582 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 581
                self.catchBlock()
                self.state = 584 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==51):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(joiParser.CATCH, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.IDENTIFIER)
            else:
                return self.getToken(joiParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.COLON)
            else:
                return self.getToken(joiParser.COLON, i)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = joiParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_catchBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(joiParser.CATCH)
            self.state = 587
            self.match(joiParser.T__2)
            self.state = 588
            self.match(joiParser.IDENTIFIER)
            self.state = 589
            self.match(joiParser.IDENTIFIER)
            self.state = 590
            self.match(joiParser.T__3)
            self.state = 591
            self.match(joiParser.COLON)
            self.state = 592
            self.statements()
            self.state = 593
            self.match(joiParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(joiParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_throwStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStmt" ):
                listener.enterThrowStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStmt" ):
                listener.exitThrowStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStmt" ):
                return visitor.visitThrowStmt(self)
            else:
                return visitor.visitChildren(self)




    def throwStmt(self):

        localctx = joiParser.ThrowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_throwStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(joiParser.THROW)
            self.state = 596
            self.expression()
            self.state = 597
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(joiParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(joiParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def elseIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ElseIfStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.ElseIfStmtContext,i)


        def elseStmt(self):
            return self.getTypedRuleContext(joiParser.ElseStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = joiParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(joiParser.IF)
            self.state = 600
            self.condition()
            self.state = 601
            self.match(joiParser.COLON)
            self.state = 602
            self.match(joiParser.T__5)
            self.state = 603
            self.statements()
            self.state = 604
            self.match(joiParser.T__6)
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 605
                        self.elseIfStmt() 
                    self.state = 610
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 611
                    self.elseStmt()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(joiParser.ELSE, 0)

        def IF(self):
            return self.getToken(joiParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(joiParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_elseIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStmt" ):
                listener.enterElseIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStmt" ):
                listener.exitElseIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfStmt" ):
                return visitor.visitElseIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def elseIfStmt(self):

        localctx = joiParser.ElseIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_elseIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(joiParser.ELSE)
            self.state = 617
            self.match(joiParser.IF)
            self.state = 618
            self.condition()
            self.state = 619
            self.match(joiParser.COLON)
            self.state = 620
            self.match(joiParser.T__5)
            self.state = 621
            self.statements()
            self.state = 622
            self.match(joiParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(joiParser.ELSE, 0)

        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_elseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStmt" ):
                listener.enterElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStmt" ):
                listener.exitElseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStmt" ):
                return visitor.visitElseStmt(self)
            else:
                return visitor.visitChildren(self)




    def elseStmt(self):

        localctx = joiParser.ElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_elseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(joiParser.ELSE)
            self.state = 625
            self.match(joiParser.COLON)
            self.state = 626
            self.match(joiParser.T__5)
            self.state = 627
            self.statements()
            self.state = 628
            self.match(joiParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(joiParser.SWITCH, 0)

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def caseStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.CaseStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.CaseStmtContext,i)


        def defaultStmt(self):
            return self.getTypedRuleContext(joiParser.DefaultStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_switchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStmt" ):
                listener.enterSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStmt" ):
                listener.exitSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStmt" ):
                return visitor.visitSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def switchStmt(self):

        localctx = joiParser.SwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(joiParser.SWITCH)
            self.state = 631
            self.expression()
            self.state = 632
            self.match(joiParser.COLON)
            self.state = 633
            self.match(joiParser.T__5)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==32:
                self.state = 634
                self.caseStmt()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 640
                self.defaultStmt()


            self.state = 643
            self.match(joiParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(joiParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def BREAK(self):
            return self.getToken(joiParser.BREAK, 0)

        def getRuleIndex(self):
            return joiParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStmt" ):
                return visitor.visitCaseStmt(self)
            else:
                return visitor.visitChildren(self)




    def caseStmt(self):

        localctx = joiParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(joiParser.CASE)
            self.state = 646
            self.expression()
            self.state = 647
            self.match(joiParser.COLON)
            self.state = 648
            self.statements()
            self.state = 649
            self.match(joiParser.BREAK)
            self.state = 650
            self.match(joiParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(joiParser.DEFAULT, 0)

        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_defaultStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultStmt" ):
                listener.enterDefaultStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultStmt" ):
                listener.exitDefaultStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultStmt" ):
                return visitor.visitDefaultStmt(self)
            else:
                return visitor.visitChildren(self)




    def defaultStmt(self):

        localctx = joiParser.DefaultStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_defaultStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(joiParser.DEFAULT)
            self.state = 653
            self.match(joiParser.COLON)
            self.state = 654
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(joiParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(joiParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = joiParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(joiParser.WHILE)
            self.state = 657
            self.condition()
            self.state = 658
            self.match(joiParser.COLON)
            self.state = 659
            self.match(joiParser.T__5)
            self.state = 660
            self.statements()
            self.state = 661
            self.match(joiParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(joiParser.DO, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def WHILE(self):
            return self.getToken(joiParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(joiParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def getRuleIndex(self):
            return joiParser.RULE_doWhileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStmt" ):
                listener.enterDoWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStmt" ):
                listener.exitDoWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStmt" ):
                return visitor.visitDoWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStmt(self):

        localctx = joiParser.DoWhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_doWhileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(joiParser.DO)
            self.state = 664
            self.match(joiParser.T__5)
            self.state = 665
            self.statements()
            self.state = 666
            self.match(joiParser.T__6)
            self.state = 667
            self.match(joiParser.WHILE)
            self.state = 668
            self.condition()
            self.state = 669
            self.match(joiParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(joiParser.FOR, 0)

        def forInit(self):
            return self.getTypedRuleContext(joiParser.ForInitContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(joiParser.ForUpdateContext,0)


        def COLON(self):
            return self.getToken(joiParser.COLON, 0)

        def statements(self):
            return self.getTypedRuleContext(joiParser.StatementsContext,0)


        def condition(self):
            return self.getTypedRuleContext(joiParser.ConditionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = joiParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(joiParser.FOR)
            self.state = 672
            self.forInit()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305844658481135624) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 31491) != 0):
                self.state = 673
                self.condition()


            self.state = 676
            self.match(joiParser.T__1)
            self.state = 677
            self.forUpdate()
            self.state = 678
            self.match(joiParser.COLON)
            self.state = 679
            self.match(joiParser.T__5)
            self.state = 680
            self.statements()
            self.state = 681
            self.match(joiParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignStmt(self):
            return self.getTypedRuleContext(joiParser.AssignStmtContext,0)


        def declarationStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.DeclarationStmtContext)
            else:
                return self.getTypedRuleContext(joiParser.DeclarationStmtContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = joiParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_forInit)
        self._la = 0 # Token type
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.declarationStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 685
                self.declarationStmt()
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 686
                    self.match(joiParser.T__4)
                    self.state = 687
                    self.declarationStmt()
                    self.state = 692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForUpdate" ):
                return visitor.visitForUpdate(self)
            else:
                return visitor.visitChildren(self)




    def forUpdate(self):

        localctx = joiParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(joiParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(joiParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(joiParser.PROTECTED, 0)

        def getRuleIndex(self):
            return joiParser.RULE_accessSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessSpecifier" ):
                listener.enterAccessSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessSpecifier" ):
                listener.exitAccessSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessSpecifier" ):
                return visitor.visitAccessSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def accessSpecifier(self):

        localctx = joiParser.AccessSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_accessSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 61572651155456) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(joiParser.LogicalOrExpressionContext,0)


        def typecastExpr(self):
            return self.getTypedRuleContext(joiParser.TypecastExprContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = joiParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_expression)
        try:
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.logicalOrExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.typecastExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypecastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(joiParser.DataTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return joiParser.RULE_typecastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypecastExpr" ):
                listener.enterTypecastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypecastExpr" ):
                listener.exitTypecastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypecastExpr" ):
                return visitor.visitTypecastExpr(self)
            else:
                return visitor.visitChildren(self)




    def typecastExpr(self):

        localctx = joiParser.TypecastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typecastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(joiParser.T__2)
            self.state = 704
            self.dataType()
            self.state = 705
            self.match(joiParser.T__3)
            self.state = 706
            self.match(joiParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.LogicalAndExpressionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.OR)
            else:
                return self.getToken(joiParser.OR, i)

        def getRuleIndex(self):
            return joiParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = joiParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.logicalAndExpression()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 709
                self.match(joiParser.OR)
                self.state = 710
                self.logicalAndExpression()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rel_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.Rel_exprContext)
            else:
                return self.getTypedRuleContext(joiParser.Rel_exprContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.AND)
            else:
                return self.getToken(joiParser.AND, i)

        def getRuleIndex(self):
            return joiParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = joiParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.rel_expr()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 717
                self.match(joiParser.AND)
                self.state = 718
                self.rel_expr()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rel_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(joiParser.NOT, 0)

        def rel_expr(self):
            return self.getTypedRuleContext(joiParser.Rel_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExprContext)
            else:
                return self.getTypedRuleContext(joiParser.ExprContext,i)


        def comparisonOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ComparisonOpContext)
            else:
                return self.getTypedRuleContext(joiParser.ComparisonOpContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_rel_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_expr" ):
                listener.enterRel_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_expr" ):
                listener.exitRel_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel_expr" ):
                return visitor.visitRel_expr(self)
            else:
                return visitor.visitChildren(self)




    def rel_expr(self):

        localctx = joiParser.Rel_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rel_expr)
        self._la = 0 # Token type
        try:
            self.state = 735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.match(joiParser.NOT)
                self.state = 725
                self.rel_expr()
                pass
            elif token in [3, 39, 40, 67, 68, 75, 76, 78, 79, 80, 81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 726
                self.expr()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 567453553048682496) != 0):
                    self.state = 727
                    self.comparisonOp()
                    self.state = 728
                    self.expr()
                    self.state = 734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.TermContext)
            else:
                return self.getTypedRuleContext(joiParser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.ADD)
            else:
                return self.getToken(joiParser.ADD, i)

        def SUB(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.SUB)
            else:
                return self.getToken(joiParser.SUB, i)

        def getRuleIndex(self):
            return joiParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = joiParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.term()
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==62 or _la==63:
                self.state = 738
                _la = self._input.LA(1)
                if not(_la==62 or _la==63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 739
                self.term()
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.FactorContext)
            else:
                return self.getTypedRuleContext(joiParser.FactorContext,i)


        def MUL(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.MUL)
            else:
                return self.getToken(joiParser.MUL, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.DIV)
            else:
                return self.getToken(joiParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(joiParser.MOD)
            else:
                return self.getToken(joiParser.MOD, i)

        def getRuleIndex(self):
            return joiParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = joiParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.factor()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 7) != 0):
                self.state = 746
                _la = self._input.LA(1)
                if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 747
                self.factor()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INC(self):
            return self.getToken(joiParser.INC, 0)

        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def DEC(self):
            return self.getToken(joiParser.DEC, 0)

        def STRING(self):
            return self.getToken(joiParser.STRING, 0)

        def CHAR_LITERAL(self):
            return self.getToken(joiParser.CHAR_LITERAL, 0)

        def NUMBER(self):
            return self.getToken(joiParser.NUMBER, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExprContext)
            else:
                return self.getTypedRuleContext(joiParser.ExprContext,i)


        def TRUE(self):
            return self.getToken(joiParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(joiParser.FALSE, 0)

        def functionCall(self):
            return self.getTypedRuleContext(joiParser.FunctionCallContext,0)


        def structAccessStmt(self):
            return self.getTypedRuleContext(joiParser.StructAccessStmtContext,0)


        def structAccessForArrayStmt(self):
            return self.getTypedRuleContext(joiParser.StructAccessForArrayStmtContext,0)


        def classFunctionAccessStmt(self):
            return self.getTypedRuleContext(joiParser.ClassFunctionAccessStmtContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = joiParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.match(joiParser.INC)
                self.state = 754
                self.idOrPointerOrAddrId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.match(joiParser.DEC)
                self.state = 756
                self.idOrPointerOrAddrId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.idOrPointerOrAddrId()
                self.state = 758
                self.match(joiParser.INC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 760
                self.idOrPointerOrAddrId()
                self.state = 761
                self.match(joiParser.DEC)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 763
                self.match(joiParser.STRING)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 764
                self.match(joiParser.CHAR_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 765
                self.idOrPointerOrAddrId()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 766
                self.match(joiParser.NUMBER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 767
                self.idOrPointerOrAddrId()
                self.state = 772 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 768
                    self.match(joiParser.T__8)
                    self.state = 769
                    self.expr()
                    self.state = 770
                    self.match(joiParser.T__9)
                    self.state = 774 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==9):
                        break

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 776
                self.match(joiParser.T__2)
                self.state = 777
                self.expr()
                self.state = 778
                self.match(joiParser.T__3)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 780
                self.match(joiParser.TRUE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 781
                self.match(joiParser.FALSE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 782
                self.functionCall()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 783
                self.structAccessStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 784
                self.structAccessForArrayStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 785
                self.classFunctionAccessStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructAccessForArrayStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structAccessStmt(self):
            return self.getTypedRuleContext(joiParser.StructAccessStmtContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(joiParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(joiParser.ExpressionContext,i)


        def getRuleIndex(self):
            return joiParser.RULE_structAccessForArrayStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructAccessForArrayStmt" ):
                listener.enterStructAccessForArrayStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructAccessForArrayStmt" ):
                listener.exitStructAccessForArrayStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructAccessForArrayStmt" ):
                return visitor.visitStructAccessForArrayStmt(self)
            else:
                return visitor.visitChildren(self)




    def structAccessForArrayStmt(self):

        localctx = joiParser.StructAccessForArrayStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_structAccessForArrayStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.structAccessStmt()
            self.state = 793 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 789
                self.match(joiParser.T__8)
                self.state = 790
                self.expression()
                self.state = 791
                self.match(joiParser.T__9)
                self.state = 795 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==9):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdOrPointerOrAddrIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def pointer(self):
            return self.getTypedRuleContext(joiParser.PointerContext,0)


        def address_identifier(self):
            return self.getTypedRuleContext(joiParser.Address_identifierContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_idOrPointerOrAddrId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdOrPointerOrAddrId" ):
                listener.enterIdOrPointerOrAddrId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdOrPointerOrAddrId" ):
                listener.exitIdOrPointerOrAddrId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdOrPointerOrAddrId" ):
                return visitor.visitIdOrPointerOrAddrId(self)
            else:
                return visitor.visitChildren(self)




    def idOrPointerOrAddrId(self):

        localctx = joiParser.IdOrPointerOrAddrIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_idOrPointerOrAddrId)
        try:
            self.state = 800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.match(joiParser.IDENTIFIER)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.pointer()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.address_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(joiParser.DOLLAR, 0)

        def idOrPointerOrAddrId(self):
            return self.getTypedRuleContext(joiParser.IdOrPointerOrAddrIdContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointer" ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = joiParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(joiParser.DOLLAR)
            self.state = 803
            self.idOrPointerOrAddrId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Address_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(joiParser.AMPERSAND, 0)

        def IDENTIFIER(self):
            return self.getToken(joiParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return joiParser.RULE_address_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddress_identifier" ):
                listener.enterAddress_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddress_identifier" ):
                listener.exitAddress_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddress_identifier" ):
                return visitor.visitAddress_identifier(self)
            else:
                return visitor.visitChildren(self)




    def address_identifier(self):

        localctx = joiParser.Address_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_address_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(joiParser.AMPERSAND)
            self.state = 806
            self.match(joiParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(joiParser.ExpressionContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = joiParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(joiParser.ADD, 0)

        def SUB(self):
            return self.getToken(joiParser.SUB, 0)

        def MUL(self):
            return self.getToken(joiParser.MUL, 0)

        def DIV(self):
            return self.getToken(joiParser.DIV, 0)

        def MOD(self):
            return self.getToken(joiParser.MOD, 0)

        def getRuleIndex(self):
            return joiParser.RULE_arithmeticOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOp" ):
                listener.enterArithmeticOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOp" ):
                listener.exitArithmeticOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOp" ):
                return visitor.visitArithmeticOp(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOp(self):

        localctx = joiParser.ArithmeticOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arithmeticOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_ASSIGN(self):
            return self.getToken(joiParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(joiParser.MINUS_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(joiParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(joiParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(joiParser.MOD_ASSIGN, 0)

        def getRuleIndex(self):
            return joiParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOp" ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOp" ):
                listener.exitAssignOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignOp" ):
                return visitor.visitAssignOp(self)
            else:
                return visitor.visitChildren(self)




    def assignOp(self):

        localctx = joiParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(joiParser.EQ, 0)

        def NEQ(self):
            return self.getToken(joiParser.NEQ, 0)

        def GT_OP(self):
            return self.getToken(joiParser.GT_OP, 0)

        def LT_OP(self):
            return self.getToken(joiParser.LT_OP, 0)

        def GTE(self):
            return self.getToken(joiParser.GTE, 0)

        def LTE(self):
            return self.getToken(joiParser.LTE, 0)

        def getRuleIndex(self):
            return joiParser.RULE_comparisonOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOp" ):
                listener.enterComparisonOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOp" ):
                listener.exitComparisonOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOp" ):
                return visitor.visitComparisonOp(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOp(self):

        localctx = joiParser.ComparisonOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_comparisonOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 567453553048682496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(joiParser.AND, 0)

        def OR(self):
            return self.getToken(joiParser.OR, 0)

        def getRuleIndex(self):
            return joiParser.RULE_logicalOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOp" ):
                listener.enterLogicalOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOp" ):
                listener.exitLogicalOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOp" ):
                return visitor.visitLogicalOp(self)
            else:
                return visitor.visitChildren(self)




    def logicalOp(self):

        localctx = joiParser.LogicalOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_logicalOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            _la = self._input.LA(1)
            if not(_la==59 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(joiParser.INT, 0)

        def BOOL(self):
            return self.getToken(joiParser.BOOL, 0)

        def FLOAT(self):
            return self.getToken(joiParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(joiParser.CHAR, 0)

        def STR(self):
            return self.getToken(joiParser.STR, 0)

        def getRuleIndex(self):
            return joiParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataType" ):
                return visitor.visitDataType(self)
            else:
                return visitor.visitChildren(self)




    def dataType(self):

        localctx = joiParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(joiParser.INT, 0)

        def AMPERSAND(self):
            return self.getToken(joiParser.AMPERSAND, 0)

        def BOOL(self):
            return self.getToken(joiParser.BOOL, 0)

        def FLOAT(self):
            return self.getToken(joiParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(joiParser.CHAR, 0)

        def STR(self):
            return self.getToken(joiParser.STR, 0)

        def getRuleIndex(self):
            return joiParser.RULE_referenceDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDataType" ):
                listener.enterReferenceDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDataType" ):
                listener.exitReferenceDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceDataType" ):
                return visitor.visitReferenceDataType(self)
            else:
                return visitor.visitChildren(self)




    def referenceDataType(self):

        localctx = joiParser.ReferenceDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_referenceDataType)
        try:
            self.state = 830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(joiParser.INT)
                self.state = 821
                self.match(joiParser.AMPERSAND)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(joiParser.BOOL)
                self.state = 823
                self.match(joiParser.AMPERSAND)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.match(joiParser.FLOAT)
                self.state = 825
                self.match(joiParser.AMPERSAND)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 826
                self.match(joiParser.CHAR)
                self.state = 827
                self.match(joiParser.AMPERSAND)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 5)
                self.state = 828
                self.match(joiParser.STR)
                self.state = 829
                self.match(joiParser.AMPERSAND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(joiParser.ProgramContext,0)


        def getRuleIndex(self):
            return joiParser.RULE_main

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain" ):
                listener.enterMain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain" ):
                listener.exitMain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain" ):
                return visitor.visitMain(self)
            else:
                return visitor.visitChildren(self)




    def main(self):

        localctx = joiParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_main)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.program()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





